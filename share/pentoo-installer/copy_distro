#!/bin/bash -x
# This script is released under the GNU General Public License 3.0
# Check the COPYING file included with this distribution

# copy_distro
# Copies the distro from squashfs plus uses rsync
#
# parameters (required)
#  CONFIG_LIST: One string with items of defined FSspec
#
# returns 0 on success
# returns $ERROR_CANCEL=64 on user cancel
# anything else is a real error
# reason: show_dialog() needs a way to exit "Cancel"
#
# writes menus and noise to STDERR

# location of other scripts to source
readonly SHAREDIR="$(dirname ${0})" || exit $?

# source common variables, functions and error handling
source "${SHAREDIR}"/common.sh || exit $?

#########################################
## START: dialog functions/definitions ##

# auto_dmcrypt()
# copy dmcrypt and keys to partitions
#
# parameters (required)
#  CONFIG_LIST: One string with items of defined FSspec
#
auto_dmcrypt() {
	# check input
	check_num_args "${FUNCNAME}" 1 $# || return $?
	local _CONF_LIST="${1}"
	local _ITEM=
	# properties of FSspec
	local _PARTITION=
	local _MOUNTPOINT=
	local _CRYPTTYPE=
	local _CRYPTNAME=
	local _CRYPTKEY=
	local _FSTAB_ITEM=
	local _DO_RCUPDATE=0
	local _RET_SUB=
	# sort by partition
	_CONF_LIST="$("${SHAREDIR}"/FSspec sort "${_CONF_LIST}" 'partition' 0)" || return $?
	# START: write all keys to /etc/keys and only swap partitions to /etc/conf.d/dmcrypt
	# swap partitions sould come first in /etc/conf.d/dmcrypt
	for _ITEM in ${_CONF_LIST}; do
		_PARTITION="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'partition')" || exit $?
		_MOUNTPOINT="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'mountpoint')" || exit $?
		_CRYPTTYPE="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'crypttype')" || exit $?
		_CRYPTNAME="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'cryptname')" || exit $?
		_CRYPTKEY="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'cryptkey')" || exit $?
		if [ "${_CRYPTTYPE}" != '' ]; then
			# write all crypt-keys (except root and swap-partitions)
			if [ "${_CRYPTTYPE}" != 'swap' ] && [ "${_MOUNTPOINT}" != '/' ]; then
				mkdir -p "${DESTDIR}/etc/keys/" || return $?
				case "${_CRYPTTYPE}" in
					'luks-gpg')
						# key is in base64 format
						echo -n "${_CRYPTKEY}" | base64 -d >"${DESTDIR}/etc/keys/${_CRYPTNAME}" || return $?
						;;
					'luks')
						echo -n "${_CRYPTKEY}" >"${DESTDIR}/etc/keys/${_CRYPTNAME}" || return $?
						;;
				esac
			# write key for root-partition
			elif [ "${_MOUNTPOINT}" = '/' ]; then
				case "${_CRYPTTYPE}" in
					'luks-gpg')
						# key is in base64 format
						echo "${_CRYPTKEY}" | base64 -d >"${DESTDIR}/boot/${_CRYPTNAME}.gpg" || return $?
						;;
					'luks')
						# Info: this should not be possible for root partition and actually is disabled in the menu
						echo "${_CRYPTKEY}" >"${DESTDIR}/boot/${_CRYPTNAME}.key" || return $?
						;;
				esac
			fi
			# add to /etc/conf.d/dmcrypt if swap
			if [ "${_CRYPTTYPE}" = 'swap' ]; then
				_DO_RCUPDATE=1
				echo ''>>"${DESTDIR}/etc/conf.d/dmcrypt" || return $?
				echo "swap=${_CRYPTNAME}">>"${DESTDIR}/etc/conf.d/dmcrypt" || return $?
				echo "source='${_PARTITION}'">>"${DESTDIR}/etc/conf.d/dmcrypt" || return $?
			fi
		fi
	done
	# END: write all keys to /etc/keys and only swap partitions to /etc/conf.d/dmcrypt
	# START: write non-swap partitions to /etc/conf.d/dmcrypt
	for _ITEM in ${_CONF_LIST}; do
		_PARTITION="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'partition')" || exit $?
		_MOUNTPOINT="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'mountpoint')" || exit $?
		_CRYPTTYPE="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'crypttype')" || exit $?
		_CRYPTNAME="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'cryptname')" || exit $?
		if [ "${_CRYPTTYPE}" != '' ]; then
			# add to /etc/conf.d/dmcrypt if non-swap and not root-partition
			if [ "${_CRYPTTYPE}" != 'swap' ] && [ "${_MOUNTPOINT}" != '/' ]; then
				_DO_RCUPDATE=1
				echo ''>>"${DESTDIR}/etc/conf.d/dmcrypt" || return $?
				echo "target=${_CRYPTNAME}">>"${DESTDIR}/etc/conf.d/dmcrypt" || return $?
				echo "source='${_PARTITION}'">>"${DESTDIR}/etc/conf.d/dmcrypt" || return $?
				case "${_CRYPTTYPE}" in
					'luks-gpg')
						echo "key='/etc/keys/${_CRYPTNAME}:gpg'">>"${DESTDIR}/etc/conf.d/dmcrypt" || return $?
						;;
					'luks')
						echo "key='/etc/keys/${_CRYPTNAME}'">>"${DESTDIR}/etc/conf.d/dmcrypt" || return $?
						;;
				esac
			fi
		fi
	done
	# run rc-update, chroot must be mounted outside this function!
	if [ "${_DO_RCUPDATE}" -eq 1 ]; then
		chroot "${DESTDIR}" /bin/bash <<EOF
rc-update add dmcrypt boot || exit $?
rc-update add device-mapper boot || exit $?
EOF
		_RET_SUB=$?
		[ "${_RET_SUB}" -ne 0 ] && return "${_RET_SUB}"
	fi
	return 0
}

# auto_fstab()
# preprocess fstab file
# comments out old fields and inserts new ones
# according to partitioning/formatting stage
#
# parameters (required)
#	CONFIG_LIST: One string with items of defined FSspec
#
auto_fstab() {
	# check input
	check_num_args "${FUNCNAME}" 1 $# || return $?
	local _CONF_LIST="${1}"
	local _ITEM=
	# properties of FSspec
	local _PARTITION=
	local _PARTUUID=
	local _MOUNTPOINT=
	local _FILESYSTEM=
	local _CRYPTTYPE=
	local _CRYPTNAME=
	local _FSTAB_ITEM=
	local _PARTPATH=
	# sort by mountpoint
	_CONF_LIST="$("${SHAREDIR}"/FSspec sort "${_CONF_LIST}" 'mountpoint' 0)" || return $?
	# comment out anything not commented out
	sed -r -i 's/^[^#]/#&/' "${DESTDIR}/etc/fstab" || return $?
	# append entries from new configuration
	if [ -n "${_CONF_LIST}" ]; then
		#clear out the scary warnings about this being the fstab on a livecd
		rm -f "${DESTDIR}/etc/fstab"
	fi
	for _ITEM in ${_CONF_LIST}; do
		_PARTITION="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'partition')" || exit $?
		_PARTUUID="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'partuuid')" || exit $?
		_MOUNTPOINT="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'mountpoint')" || exit $?
		_FILESYSTEM="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'filesystem')" || exit $?
		_CRYPTTYPE="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'crypttype')" || exit $?
		_CRYPTNAME="$("${SHAREDIR}"/FSspec parse "${_ITEM}" 'cryptname')" || exit $?
		# normalize filesystem
		if [ "${_FILESYSTEM}" = "ext4-nojournal" ]; then
			_FILESYSTEM="ext4"
		elif [ "${_FILESYSTEM}" = "fat32" ]; then
			_FILESYSTEM="vfat"
		fi
		if [ -n "${_CRYPTTYPE}" ]; then
			if [ "${_FILESYSTEM}" = 'swap' ]; then
				_PARTPATH="/dev/mapper/${_CRYPTNAME}"
			else
				_PARTPATH="UUID=$(blkid -s UUID -o value /dev/mapper/${_CRYPTNAME})"
			fi
		else
			#if [ "${_FILESYSTEM}" = 'swap' ]; then
			#	_PARTPATH="${_PARTITION}"
			#else
				_PARTPATH="UUID=$(blkid -s UUID -o value ${_PARTITION})"
			#fi
		fi
		# START: fstab setup
		# start defining fstab item
		_FSTAB_ITEM="${_PARTPATH}"
		# add mountpoint
		if [ "${_FILESYSTEM}" != 'swap' ]; then
			_FSTAB_ITEM="${_FSTAB_ITEM} ${_MOUNTPOINT}"
		else
			_FSTAB_ITEM="${_FSTAB_ITEM} none"
		fi
		# add filesystem
		_FSTAB_ITEM="${_FSTAB_ITEM} ${_FILESYSTEM}"
		# add options
		if [ "${_MOUNTPOINT}" = "/boot" ]; then
			_FSTAB_ITEM="${_FSTAB_ITEM} defaults,noauto"
		else
			_FSTAB_ITEM="${_FSTAB_ITEM} defaults"
		fi
		# add dump flag
		# TODO: should boot partition '/boot' be different?
		_FSTAB_ITEM="${_FSTAB_ITEM} 0"
		# add pass
		# TODO: should boot partition '/boot' and root partition '/' be different?
		if [ "${_FILESYSTEM}" = 'swap' ] || [ "${_FILESYSTEM}" = 'btrfs' ]; then
			_FSTAB_ITEM="${_FSTAB_ITEM} 0"
		elif [ "${_MOUNTPOINT}" = '/' ]; then
			_FSTAB_ITEM="${_FSTAB_ITEM} 1"
		else
			_FSTAB_ITEM="${_FSTAB_ITEM} 2"
		fi
		# add to fstab
		if [ -n "${_CRYPTTYPE}" ]; then
			echo "#/dev/mapper/${_CRYPTNAME}" >> "${DESTDIR}/etc/fstab" || return $?
		else
			echo "#${_PARTITION}" >> "${DESTDIR}/etc/fstab" || return $?
		fi
		echo "${_FSTAB_ITEM}" >> "${DESTDIR}/etc/fstab" || return $?
		# END: fstab setup
	done
	return 0
}

## END: dialog functions/definitions ##
#######################################

#####################
## begin execution ##

# check input
check_num_args "$(basename $0)" 1 $# || exit $?
CONFIG_LIST="${1}"
RET_SUB=
MODULE=

# mount everything, including cryptsetup
"${SHAREDIR}"/FSspec mountall "${CONFIG_LIST}" || exit $?

"${SHAREDIR}"/gauge_unsquashfs '/mnt/cdrom/image.squashfs' "${DESTDIR}" "Uncompressing base system" || exit $?

# squashfs files created by flushchanges are ignored - they may contain whiteout files!
# filenames used by flushchanges (old/new syntax): z_changes-* zz_changes-*
for MODULE in $(ls -1 --color=never /mnt/cdrom/modules/*.lzm | grep -v -e '/z_' -e '/zz_'); do
	"${SHAREDIR}"/gauge_unsquashfs "${MODULE}" "${DESTDIR}" "Uncompressing ${MODULE%.lzm}" || exit $?
done
# Unconditionally rsync the minimum we expect for a working system
show_dialog_rsync '-av --progress' \
	'/etc/' "${DESTDIR}/etc" "Syncing /etc ..." || exit $?
show_dialog_rsync '-av --progress --exclude=/root/.bashrc' \
	'/root/' "${DESTDIR}/root" "Syncing /root ..." || exit $?
show_dialog_rsync '-av --progress --exclude=/home/pentoo/.bashrc' \
	'/home/pentoo/' "${DESTDIR}/home/pentoo" "Syncing /home/pentoo ..." || exit $?
show_dialog_rsync '-av --progress' \
	"/lib/modules/" "${DESTDIR}/lib/modules" "Syncing kernel modules ..." || exit $?
show_dialog_rsync '-av --progress' \
	"/var/lib/portage/" "${DESTDIR}/var/lib/portage" "Syncing portage information ..." || exit $?
show_dialog_rsync '-av --progress' \
	"/var/log/" "${DESTDIR}/var/log" "Syncing logs ..." || exit $?
if [ -d "/mnt/overlay/.upper/var/lib/NetworkManager" ]; then
	show_dialog_rsync '-av --progress' \
		"/var/lib/NetworkManager" "${DESTDIR}/var/lib/" "Syncing NetworkManager config ..." || exit $?
fi
if [ -d "/mnt/overlay/.upper/var/lib/gentoo/news" ]; then
	show_dialog_rsync '-av --progress' \
		"/var/lib/gentoo/news" "${DESTDIR}/var/lib/gentoo/" "Syncing Gentoo News ..." || exit $?
fi
if [ -d "/mnt/overlay/.upper/var/lib/dhcpcd" ]; then
	show_dialog_rsync '-av --progress' \
		"/var/lib/dhcpcd" "${DESTDIR}/var/lib/" "Syncing dhcpcd config ..." || exit $?
fi
if [ -d "/mnt/overlay/.upper/usr/portage" ]; then
	show_dialog_rsync '-av --progress' \
		"/usr/portage/" "${DESTDIR}/usr/portage" "Syncing gentoo portage tree ..." || exit $?
fi
#old repo location
if [ -d "/mnt/overlay/.upper/var/lib/layman" ]; then
	show_dialog_rsync '-av --progress' \
		"/var/lib/layman/" "${DESTDIR}/var/lib/layman" "Syncing pentoo overlay ..." || exit $?
fi
#new repo location
if [ -d "/mnt/overlay/.upper/var/db/repos" ]; then
	show_dialog_rsync '-av --progress' \
		"/var/db/repos/" "${DESTDIR}/var/db/repos" "Syncing pentoo overlay ..." || exit $?
fi

# check if we need to prompt user about syncing more things
unsyncd=""
tmp_unsyncd=""
for i in $(ls -1 /mnt/overlay/.upper); do
	[ "${i}" = "root" ] && continue
	[ "${i}" = "etc" ] && continue
	[ "${i}" = "mnt" ] && continue
	[ "${i}" = "proc" ] && continue
	[ "${i}" = "dev" ] && continue
	[ "${i}" = "sys" ] && continue
	[ "${i}" = "run" ] && continue
	[ "${i}" = "newroot" ] && continue
	[ "${i}" = "tmp" ] && continue
	if [ "${i}" = "var" ]; then
		tmp_unsyncd=$(du -sh --exclude=cache --exclude=tmp --exclude=run --exclude=log --exclude=db/pkg/pentoo/pentoo-installer-* --exclude=lib/portage --exclude=lib/blueman/network.state --exclude=lib/misc/random-seed --exclude=lib/NetworkManager --exclude=lib/gentoo/news --exclude=lib/dhcpcd --exclude=lib/syslog-ng/syslog-ng.persist --exclude=lib/layman "/mnt/overlay/.upper/${i}" 2> /dev/null | grep -v -E '^0|^4\.0K')
	elif [ "${i}" = "home" ]; then
		tmp_unsyncd=$(du -sh --exclude=home/pentoo "/mnt/overlay/.upper/${i}" 2> /dev/null | grep -v -E '^0|^4\.0K')
	elif [ "${i}" = "lib" ] || [ "${i}" = "lib64" ]; then
		tmp_unsyncd=$(du -sh --exclude=modules --exclude=rc/console/unicode "/mnt/overlay/.upper/${i}" 2> /dev/null | grep -v -E '^0|^4\.0K')
	elif [ "${i}" = "sbin" ]; then
		tmp_unsyncd=$(du -sh --exclude=pentoo-installer "/mnt/overlay/.upper/${i}" 2> /dev/null | grep -v -E '^0|^4\.0K')
	elif [ "${i}" = "usr" ]; then
		tmp_unsyncd=$(du -sh --exclude=share/applications/pentoo-installer.desktop --exclude=share/applications/sudo-pentoo-installer.desktop --exclude=share/pentoo-installer --exclude=portage "/mnt/overlay/.upper/${i}" 2> /dev/null | grep -v -E '^0|^4\.0K')
	else
		tmp_unsyncd=$(du -sh "/mnt/overlay/.upper/${i}" 2> /dev/null | grep -v -E '^0|^4\.0K')
	fi
	if [ -n "${tmp_unsyncd}" ]; then
		unsyncd="${unsyncd}${tmp_unsyncd/\mnt\/overlay\/.upper\//}\n"
	fi
done

if [ -n "${unsyncd}" ]; then
	show_dialog --defaultno --yesno "The following unsynced changes to the running livecd have been detected:\n${unsyncd}\nWould you like to sync unsaved changes to your new install? (It is safe to say no here if no changes to the running livecd were intended.)" 0 0
	RET_SUB=$?

	# run rsync with nice dialog
	if [ "${RET_SUB}" = "0" ]; then
		show_dialog_rsync '-av --progress --exclude=/mnt --exclude=/proc --exclude=/dev --exclude=/sys --exclude=/run --exclude=/newroot --exclude=/tmp --exclude=/var/tmp --exclude=/var/run --exclude=/var/lock' \
			'/*' "${DESTDIR}/" "Syncing / ..." || exit $?
	fi
fi

# pre-configure systems, these steps should happen only once
# must mount chroot so pre/post installs don't fail out
chroot_mount || exit $?

show_dialog --infobox "Removing livecd only packages and configs from install..." 3 70

# remove livecd stuff
sed -i '/bindist livecd/d' "${DESTDIR}"/etc/portage/make.conf
chroot "${DESTDIR}" emerge --rage-clean app-misc/livecd-tools pentoo/pentoo-livecd pentoo/pentoo-installer app-admin/pwgen sys-apps/hwsetup sys-apps/hwdata-gentoo x11-misc/mkxf86config net-dialup/mingetty wmctrl
rm -f "${DESTDIR}/home/pentoo/Desktop/pentoo-installer.desktop"
rm -f "${DESTDIR}/home/pentoo/Desktop/networkmanager.desktop"
#mark open-vm-tools to keep if we are on a vm
if [ -n "${vm:-}" ] && [ -n "${vm_from:-}" ]; then
	printf "Detecting ${vm} using ${vm_from}, marking open-vm-tools required.\n"
	chroot "${DESTDIR}" emerge --noreplace app-emulation/open-vm-tools --nodeps || exit $?
fi

#prevent livecd bashrc from being on install
rm -f "${DESTDIR}"/root/.bashrc
[ -w "${DESTDIR}"/home/pentoo/.bashrc ] && rm -f "${DESTDIR}"/home/pentoo/.bashrc

mknod -m666 "${DESTDIR}"/dev/zero c 1 5
mknod -m666 "${DESTDIR}"/dev/null c 1 3
mknod -m600 "${DESTDIR}"/dev/console c 5 1
mkdir -m755 "${DESTDIR}"/media/{cd,dvd,fl}

chroot "${DESTDIR}" /bin/bash <<EOF
rc-update del autoconfig default # || exit $?
rc-update del binary-driver-handler # || exit $?
rc-update del firmware boot # || exit $?
rc-update del fixinittab default # || exit $?
rc-update del pwgen default # || exit $?
rc-update add keymaps default # || exit $?
rc-update add fcron default # || exit $?
if [ -r /etc/inittab.old ]; then
  mv /etc/inittab.old /etc/inittab # || exit $?
fi
if [ -r /etc/issue.pentoo.logo ]; then
  cp /etc/issue.pentoo.logo /etc/issue
elif [ -r /etc/issue.logo ]; then
  cp /etc/issue.logo /etc/issue
elif [ -r /etc/issue.old ]; then
  cp /etc/issue.old /etc/issue
fi
(eselect pinentry set pinentry-gtk-2 || eselect pinentry set pinentry-curses) || exit $?
if [ -e /etc/init.d/halt.sh.orig ]; then
  mv /etc/init.d/halt.sh.orig /etc/init.d/halt.sh # || exit $?
fi
EOF
RET_SUB=$?
[ "${RET_SUB}" -ne 0 ] && exit "${RET_SUB}"
# ensure that the disk is synced
sync || exit $?

# automagic time!
# any automatic configuration should go here
show_dialog --infobox "Writing base configuration..." 3 40
auto_fstab "${CONFIG_LIST}" || exit $?
auto_dmcrypt "${CONFIG_LIST}" || exit $?

# don't need chroot anymore
chroot_umount || exit $?

exit 0
