#!/bin/bash -x
# This script is released under the GNU General Public License 3.0
# Check the COPYING file included with this distribution

# bootloader_grub
# installs Grub2
#
# parameters (required)
#  CONFIG_LIST: One string items of defined FSspec
#
# returns 0 on success
# returns $ERROR_CANCEL=64 on user cancel
# anything else is a real error
# reason: show_dialog() needs a way to exit "Cancel"
#
# writes menus and noise to STDERR

# location of other scripts to source
readonly SHAREDIR="$(dirname ${0})" || exit $?

# source bootloader commons
source "${SHAREDIR}"/bootloader_common.sh || exit $?

#########################################
## START: dialog functions/definitions ##

# confirm_overwrite_OSloader()
# if target file exists, user is asked if he wants to overwrite it
#
# parameters (required)
#  _SOURCE: The path to the source file
#  _TARGET: The path to the target file
#
confirm_overwrite_OSloader() {
	# check input
	check_num_args "${FUNCNAME}" 2 $# || return $?
	local _SOURCE="$1"
	local _TARGET="$2"
	if [ ! -e "${_TARGET}" ] || \
		show_dialog --defaultno --yesno "An OS loader already exists at the standardized file path:\n${_TARGET}\nSome UEFI implementations boot from that file.\nDo you want to overwrite it?" 0 0; then
		cp "${_SOURCE}" "${_TARGET}" || return $?
	fi
	return 0
}

# get_parent_disk()
# Gets the parent disk of a partition, prints to STDOUT
#
# returns 0 on success
#
# parameters (required):
#  _PARTITION: the partition
#
get_parent_disk() {
	# check input
	check_num_args "${FUNCNAME}" 1 $# || return $?
	local _PARENT=
	# get parent (/dev/sda)
	_PARENT="$(lsblk -dnp -o PKNAME "${1}")" || return $?
	# check type='disk'
	if [ "$(lsblk -dnp -o TYPE "${_PARENT}")" != 'disk' ]; then
		echo "ERROR: Expected type=disk!" 1>&2
		return 1
	fi
	echo "${_PARENT}"
	return 0
}

# mapdev()
# maps a partition to a grub device
#
# parameters (required)
#  _PARTITION: The partition
#
mapdev() {
	# check input
	check_num_args "${FUNCNAME}" 1 $# || return $?
	local _PARTITION="$1"
	local _DISK=
	#local _PNUM=
	#local _DISK_GRUB=
	# get parent (/dev/sda)
	_DISK="$(get_parent_disk "${_PARTITION}")" || return $?
	# /dev/sdaXY
	#_PNUM="${_PARTITION#"${_DISK}"}"
	# -1 (grub starts counting at 0), cut p off partition number if it exists
	#_PNUM=$((${_PNUM#p}-1)) || return $?
	#_DISK_GRUB="$(sed -r -e 's/[\(\)]//g' -e 's/[[:blank:]]+/ /g' "${DESTDIR}/boot/grub/device.map" | grep " ${_DISK}$" | cut -d' ' -f1)" || return $?
	if [ -n "${_DISK}" ]; then
		echo -n "${_DISK}"
		return 0
	else
		echo "ERROR: GRUB device not found properly" 1>&2
		return 1
	fi
}

# freeze xfs filesystems to enable grub installation on xfs filesystems
fs_sync_helper() {
  return
  # I strongly suspect this isn't needed at all, so let's test
  # Based on quick research this was all needed due to an incompatibility between grub <0.97 and xfs
  # https://bugs.launchpad.net/ubuntu/+source/grub/+bug/8058
  sync
  if [ -x /usr/sbin/xfs_freeze ]; then
    for MOUNTPOINT_XFS in $(mount | grep " ${DESTDIR}" | grep ' type xfs ' | cut -d' ' -f3); do
      if [ "${1}" = "freeze" ]; then
        echo "INFO: Freezing XFS filesystem mounted at ${MOUNTPOINT_XFS}" 1>&2
        /usr/sbin/xfs_freeze -f "${MOUNTPOINT_XFS}" 2>/dev/null
      else
        echo "INFO: Un-freezing XFS filesystem mounted at ${MOUNTPOINT_XFS}" 1>&2
        /usr/sbin/xfs_freeze -u "${MOUNTPOINT_XFS}" 2>/dev/null
      fi
    done
  fi
}

## END: dialog functions/definitions ##
#######################################

#####################
## begin execution ##

# check input
check_num_args "$(basename $0)" 1 $# || exit $?
CONFIG_LIST="${1}"
CONFIG_ITEM=
#RET_SUB=

# get root partition
CONFIG_ITEM="$("${SHAREDIR}"/FSspec listfind "${CONFIG_LIST}" 'mountpoint' '/')" || exit $?
PART_ROOT="$("${SHAREDIR}"/FSspec parse "${CONFIG_ITEM}" 'partition')" || exit $?
ROOT_UUID="UUID=$(blkid -s UUID -o value ${PART_ROOT})" || exit $?
# root partition encrypted?
CRYPTTYPE="$("${SHAREDIR}"/FSspec parse "${CONFIG_ITEM}" 'crypttype')" || exit $?
CRYPTNAME="$("${SHAREDIR}"/FSspec parse "${CONFIG_ITEM}" 'cryptname')" || exit $?

# look for a separately-mounted /boot partition
if "${SHAREDIR}"/FSspec list_haskeyvalue "${CONFIG_LIST}" 'mountpoint' '/boot'; then
	# get boot partition
	CONFIG_ITEM="$("${SHAREDIR}"/FSspec listfind "${CONFIG_LIST}" 'mountpoint' '/boot')" || exit $?
	PART_BOOT="$("${SHAREDIR}"/FSspec parse "${CONFIG_ITEM}" 'partition')" || exit $?
	BOOT_UUID="UUID=$(blkid -s UUID -o value ${PART_BOOT})" || exit $?
	#PART_GRUB="$(mapdev ${PART_BOOT})" || exit $?
	#SUBDIR=
	DISK_BOOT="$(get_parent_disk "${PART_BOOT}")" || exit $?
else
	#PART_GRUB="$(mapdev ${PART_ROOT})" || exit $?
	#SUBDIR="/boot"
	DISK_BOOT="$(get_parent_disk "${PART_ROOT}")" || exit $?
fi

KERNEL_PARAMS=
# get kernel version
#KERNVER="$(getkernelversion)" || exit $?
# get kernel params
KERNEL_PARAMS="$(getkernelparams "${ROOT_UUID}" "${BOOT_UUID}" "${CRYPTTYPE}" "${CRYPTNAME}")" || exit $?

#GRUBMENU="${DESTDIR}/boot/grub/grub.conf"
GRUBCONFIG="${DESTDIR}/etc/default/grub"

#setup /etc/default/grub
#sed -i "/^# *GRUB_CMDLINE_LINUX_DEFAULT=/s/^# *//" "${GRUBCONFIG}"
sed -i "s@#GRUB_CMDLINE_LINUX=\"\"@GRUB_CMDLINE_LINUX=\"${KERNEL_PARAMS}\"@" "${GRUBCONFIG}" || exit $?
#add "resume=/dev/swappartition?"

# set pentoo bootsplash
# all
sed -i 's/Gentoo/Pentoo/' "${GRUBCONFIG}" || exit $?
# old
if [ -f "${DESTDIR}"/boot/grub/pentoosplash.png ]; then
  sed -i 's/^#GRUB_BACKGROUND/GRUB_BACKGROUND/' "${GRUBCONFIG}" || exit $?
  sed -i 's/mybackground/pentoosplash/' "${GRUBCONFIG}" || exit $?
fi
# new
if [ -f "${DESTDIR}"/usr/share/grub/themes/pentoo/pentoosplash.png ]; then
  sed -i 's/^#GRUB_THEME/GRUB_THEME/' "${GRUBCONFIG}" || exit $?
  sed -i 's/starfield/pentoo/' "${GRUBCONFIG}" || exit $?
fi
# for uefi set efifb for video
if [ -d /sys/firmware/efi ]; then
  sed -i 's#video=\S* #video=efifb #' "${GRUBCONFIG}" || exit $?
fi

# inform user about target disk, partitions and such, last chance to abort ;)
show_dialog --defaultno --yesno "GRUB bootloader will be installed to '${DISK_BOOT}'.\nPlease confirm this.\n\nYou will then be put into the editor to review the GRUB configuration file.\nInstallation will continue after you exit the editor." 0 0 || exit $?

show_dialog --infobox "Filesystem is being prepared for bootloader. Please stand by..." 4 65

# set system editor (if not already defined)
chroot_mount || exit $?
EDITOR="$(geteditor)" || exit $?
# let user edit grub menu file (skipped for headless mode)
if [ -z "${INSTALLER_HEADLESS:-}" ]; then
	"${EDITOR}" "${GRUBCONFIG}" || exit $?
fi

show_dialog --infobox "Grub bootloader is being installed and prepared for booting. Please stand by..." 4 70
#maybe move the stat check a LOT earlier?
if [ -d /sys/firmware/efi ]; then
  if mountpoint -q -- /sys/firmware/efi/efivars ; then
    efivars="1"
    if [ -w /sys/firmware/efi/efivars ]; then
      efiwriteable="1"
    else
      efiwriteable="0"
      mount -o remount,rw /sys/firmware/efi/efivars || exit $?
    fi
  else
    efivars="0"
  fi

  [ ! -d "${DESTDIR}"/boot/efi ] && mkdir -p "${DESTDIR}"/boot/efi
  #this check is super loose, since we actually are putting all of /boot in ESP for simplicity
  if [ "$(stat -f -c %T "${DESTDIR}"/boot/efi)" != "msdos" ]; then
    show_dialog --msgbox "/boot/efi *MUST* be formatted FAT, aborting." 0 0
    exit 1
  fi
  #run grub-install
  #copy shim into place
  #remove efi boot to grub
  #tell efi to boot shim (which boots grub)
  if [ -r "/sys/firmware/efi/fw_platform_size" ] && [ "$(cat /sys/firmware/efi/fw_platform_size)" = "64" ]; then
    fs_sync_helper freeze
    chroot "${DESTDIR}" /usr/sbin/grub-install -v --efi-directory=/boot --bootloader-id=Pentoo --themes=pentoo --target=x86_64-efi --recheck "${DISK_BOOT}" >/tmp/grub.log 2>&1 || exit $?
    fs_sync_helper unfreeze
    cp "${DESTDIR}"/usr/share/shim/BOOTX64.EFI "${DESTDIR}"/boot/efi/Pentoo/BOOTX64.EFI || exit $?
    cp "${DESTDIR}"/usr/share/shim/mmx64.efi "${DESTDIR}"/boot/efi/Pentoo/mmx64.efi || exit $?
    # mokmanager efi image is sometimes required in /boot/efi/boot
    mkdir -p "${DESTDIR}"/boot/efi/boot || exit $?
    cp "${DESTDIR}"/usr/share/shim/mmx64.efi "${DESTDIR}"/boot/efi/boot/mmx64.efi || exit $?
    if [ "${efivars}" = "1" ]; then
      #the kernel cannnot handle 32 bit userland and 64 bit efi well, so we can't do this
      if efibootmgr | grep -q Pentoo; then
        efibootmgr -B -b $(efibootmgr | grep Pentoo | awk -F'*' '{print $1}' | cut -b 5-8) || exit $?
      fi
      efibootmgr --create --disk "${DISK_BOOT}" --part ${PART_BOOT:(-1)} --loader '/EFI/Pentoo/BOOTX64.EFI' --label "Pentoo" --verbose || exit $?
    fi
  elif [ -r "/sys/firmware/efi/fw_platform_size" ] && [ "$(cat /sys/firmware/efi/fw_platform_size)" = "32" ]; then
    fs_sync_helper freeze
    chroot "${DESTDIR}" /usr/sbin/grub-install -v --efi-directory=/boot --bootloader-id=Pentoo --themes=pentoo --target=i386-efi --recheck "${DISK_BOOT}" >/tmp/grub.log 2>&1 || exit $?
    fs_sync_helper unfreeze
    cp "${DESTDIR}"/usr/share/shim/BOOTIA32.EFI "${DESTDIR}"/boot/efi/Pentoo/BOOTIA32.EFI || exit $?
    cp "${DESTDIR}"/usr/share/shim/mmia32.efi "${DESTDIR}"/boot/efi/Pentoo/mmia32.efi || exit $?
    # mokmanager efi image is sometimes required in /boot/efi/boot
    mkdir -p "${DESTDIR}"/boot/efi/boot || exit $?
    cp "${DESTDIR}"/usr/share/shim/mmia32.efi "${DESTDIR}"/boot/efi/boot/mmia32.efi || exit $?
    if [ "${efivars}" = "1" ]; then
      if efibootmgr | grep -q Pentoo; then
        efibootmgr -B -b $(efibootmgr | grep Pentoo | awk -F'*' '{print $1}' | cut -b 5-8) || exit $?
      fi
      efibootmgr --create --disk "${DISK_BOOT}" --part ${PART_BOOT:(-1)} --loader '/EFI/Pentoo/BOOTIA32.EFI' --label "Pentoo" --verbose || exit $?
    fi
  else
    fs_sync_helper freeze
    chroot "${DESTDIR}" /usr/sbin/grub-install -v --efi-directory=/boot --bootloader-id=Pentoo --themes=pentoo --recheck "${DISK_BOOT}" >/tmp/grub.log 2>&1 || exit $?
    fs_sync_helper unfreeze
    cp "${DESTDIR}"/usr/share/shim/BOOTX64.EFI "${DESTDIR}"/boot/efi/Pentoo/BOOTX64.EFI || exit $?
    cp "${DESTDIR}"/usr/share/shim/mmx64.efi "${DESTDIR}"/boot/efi/Pentoo/mmx64.efi || exit $?
    # mokmanager efi image is sometimes required in /boot/efi/boot
    mkdir -p "${DESTDIR}"/boot/efi/boot || exit $?
    cp "${DESTDIR}"/usr/share/shim/mmx64.efi "${DESTDIR}"/boot/efi/boot/mmx64.efi || exit $?
    if [ "${efivars}" = "1" ]; then
      if efibootmgr | grep -q Pentoo; then
        efibootmgr -B -b $(efibootmgr | grep Pentoo | awk -F'*' '{print $1}' | cut -b 5-8) || exit $?
      fi
      efibootmgr --create --disk "${DISK_BOOT}" --part ${PART_BOOT:(-1)} --loader '/EFI/Pentoo/BOOTX64.EFI' --label "Pentoo" --verbose || exit $?
    fi
  fi
  #so uefi implementations suck, like lots of them.  So let's populate the fallback location too, you know, for fun (if my intel nuc needs this, then it's required)
  mkdir -p "${DESTDIR}"/boot/efi/boot || exit $?
  if [ -f "${DESTDIR}"/boot/efi/Pentoo/grubx64.efi ]; then
    cp "${DESTDIR}"/boot/efi/Pentoo/grubx64.efi "${DESTDIR}"/boot/efi/boot/GRUBX64.EFI || exit $?
  fi
  if [ -f "${DESTDIR}"/boot/efi/Pentoo/grubia32.efi ]; then
    cp "${DESTDIR}"/boot/efi/Pentoo/grubia32.efi "${DESTDIR}"/boot/efi/boot/GRUBIA32.EFI || exit $?
  fi
  #add shim for secure boot to the fallback location
  if [ -r "/sys/firmware/efi/fw_platform_size" ] && [ "$(cat /sys/firmware/efi/fw_platform_size)" = "64" ]; then
    confirm_overwrite_OSloader "${DESTDIR}"/usr/share/shim/BOOTX64.EFI "${DESTDIR}"/boot/efi/boot/BOOTX64.EFI || exit $?
  elif [ -r "/sys/firmware/efi/fw_platform_size" ] && [ "$(cat /sys/firmware/efi/fw_platform_size)" = "32" ]; then
    confirm_overwrite_OSloader "${DESTDIR}"/usr/share/shim/BOOTIA32.EFI "${DESTDIR}"/boot/efi/boot/BOOTIA32.EFI || exit $?
  else
    confirm_overwrite_OSloader "${DESTDIR}"/usr/share/shim/BOOTX64.EFI "${DESTDIR}"/boot/efi/boot/BOOTX64.EFI || exit $?
  fi
  #clearing the mok password forces the user to set one at boot
  if [ "${efivars}" = "1" ]; then
    mokutil --clear-password || true
    chroot "${DESTDIR}" emerge --noreplace sys-boot/mokutil --nodeps || exit $?
  fi
  if [ "${efivars}" = "1" ] && [ "${efiwriteable}" = "0" ]; then
    mount -o remount,ro /sys/firmware/efi/efivars || exit $?
  fi
  chroot "${DESTDIR}" emerge --noreplace sys-boot/shim --nodeps || exit $?
else
  fs_sync_helper freeze
  chroot "${DESTDIR}" /usr/sbin/grub-install -v --themes=pentoo --recheck "${DISK_BOOT}" >/tmp/grub.log 2>&1 || exit $?
  fs_sync_helper unfreeze
fi
cat "${DESTDIR}"/tmp/grub.log >>"${LOG}"
#okay so wow, this is ugly
#os-prober sucks, and to handle lvm volumes it needs lvmetad running
#if it's not running, then it has to time out on a bunch of things like /dev/loop0 and /dev/ram0 which takes forever
#easiest solution, run lvmetad
show_dialog --infobox "Starting lvmetad to appease os-prober. Please stand by..." 4 70
/etc/init.d/lvmetad start
rm -rf "${DESTDIR}/run/*"
mount --make-shared /run
mount --rbind --make-rslave /run "${DESTDIR}/run"
show_dialog --infobox "Grub bootloader is being configured for booting. Please stand by..." 4 70
chroot "${DESTDIR}" /usr/sbin/grub-mkconfig -o /boot/grub/grub.cfg || exit $?
umount -R "${DESTDIR}/run"
show_dialog --infobox "Stopping lvmetad, no longer needed. Please stand by..." 4 70
/etc/init.d/lvmetad stop

chroot "${DESTDIR}" emerge --noreplace sys-boot/grub:2 --nodeps || exit $?

sync
chroot_umount || exit $?

if grep -q 'Error [0-9]*: ' "${DESTDIR}"/tmp/grub.log; then
	show_dialog --msgbox "Error installing GRUB. (see ${LOG} for output)" 0 0
	exit 1
fi

show_dialog --msgbox "GRUB was successfully installed." 0 0
exit 0
