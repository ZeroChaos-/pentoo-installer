#!/bin/bash -x
# This script is released under the GNU General Public License 3.0
# Check the COPYING file included with this distribution

# pentoo-installer
# main menu for the installation
# sub scripts should write only results to STDOUT
# menus and noise go to STDERR
# params: none
#
# returns 0 on success
# returns $ERROR_CANCEL=64 on user cancel
# anything else is a real error
# reason: show_dialog() needs a way to exit "Cancel"
#

#this really shouldn't fail, but somehow it did
#readonly SHAREDIR="$(dirname ${0})/../share/pentoo-installer"
readonly SHAREDIR="/usr/share/pentoo-installer"

# source common variables, functions and error handling
# also get functions to save settings
source "${SHAREDIR}"/save_settings.sh || exit $?

if [ -d /sys/firmware/efi ];then
  if ! mountpoint -q -- /sys/firmware/efi/efivars ; then
    if [ "$(uname -m)" = "i686" ] && [ -r "/sys/firmware/efi/fw_platform_size" ] && [ "$(cat /sys/firmware/efi/fw_platform_size)" = "64" ]; then
      show_dialog --msgbox "STOP NOW.  You are installing 32 bit on a 64 bit system.  Not only do you not want to do that, but you will not have control over any efivars which makes booting...interesting.  What you want to do is install the amd64 verson of pentoo.  At worst you want to reboot and boot non-uefi to install in legacy mode.  You really really really don't want to continue." 0 0
    else
      show_dialog --msgbox "Something is wrong with your system and we are unable to mount efivars.  Please report this issue.  You like don't want to continue trying to install without active support." 0 0
    fi
  fi
fi

checkvm() {
  vm=""
  vm_from=""
	#this entire section of code is completely stolen from Carlos Perez's work in checkvm.rb for metasploit and rewritten (poorly) in sh
	#check loaded modules
	if [ -x "$(command -v lsmod 2>&1)" ]; then
		lsmod_data="$(lsmod 2>&1 | awk '{print $1}')"
		if [ -n "${lsmod_data}" ]; then
			printf "${lsmod_data}" | grep -iqE "vboxsf|vboxguest" 2> /dev/null && vm="VirtualBox"
			printf "${lsmod_data}" | grep -iqE "vmw_ballon|vmxnet|vmw" 2> /dev/null && vm="VMware"
			printf "${lsmod_data}" | grep -iqE "xen-vbd|xen-vnif" 2> /dev/null && vm="Xen"
			printf "${lsmod_data}" | grep -iqE "virtio_pci|virtio_net" 2> /dev/null && vm="Qemu/KVM"
			printf "${lsmod_data}" | grep -iqE "hv_vmbus|hv_blkvsc|hv_netvsc|hv_utils|hv_storvsc" && vm="MS Hyper-V"
			[ -n "${vm}" ] && vm_from="lsmod"
		fi
	fi

	#check scsi driver
	if [ -z "${vm_from}" ]; then
		if [ -r /proc/scsi/scsi ]; then
			grep -iq "vmware" /proc/scsi/scsi 2> /dev/null && vm="VMware"
			grep -iq "vbox" /proc/scsi/scsi 2> /dev/null && vm="VirtualBox"
			[ -n "${vm}" ] && vm_from="/pro/scsi/scsi"
		fi
	fi

	# Check IDE Devices
	if [ -z "${vm_from}" ];	then
		if [ -d /proc/ide ]; then
			ide_model="$(cat /proc/ide/hd*/model)"
			printf "${ide_model}" | grep -iq "vbox" 2> /dev/null && vm="VirtualBox"
			printf "${ide_model}" | grep -iq "vmware" 2> /dev/null && vm="VMware"
			printf "${ide_model}" | grep -iq "qemu" 2> /dev/null && vm="Qemu/KVM"
			printf "${ide_model}" | grep -iqE "virtual (hd|cd)" 2> /dev/null && vm="Hyper-V/Virtual PC"
			[ -n "${vm}" ] && vm_from="ide_model"
		fi
	fi

	# Check using lspci
	if [ -z "${vm_from}" ] && [ "${LSPCI}" = "1" ]; then
			lspci_data="$(lspci 2>&1)"
			printf "${lspci_data}" | grep -iq "vmware" 2> /dev/null && vm="VMware"
			printf "${lspci_data}" | grep -iq "virtualbox" 2> /dev/null && vm="VirtualBox"
			[ -n "${vm}" ] && vm_from="lspci"
	fi

	# Xen bus check
	## XXX: Removing unsafe check
	# this check triggers if CONFIG_XEN_PRIVILEGED_GUEST=y et al are set in kconfig (debian default) even in not actually a guest
	#if [ -z ${vm} ]
	#then
	#	ls -1 /sys/bus | grep -iq "xen" 2> /dev/null && vm="Xen"
	#	vm_from="/sys/bus/xen"
	#fi

	# Check using lscpu
	if [ -z "${vm_from}" ]; then
		if [ -x "$(command -v lscpu 2>&1)" ]; then
                        lscpu_data="$(lscpu 2>&1)"
			printf "${lscpu_data}" | grep -iq "Xen" 2> /dev/null && vm="Xen"
			printf "${lscpu_data}" | grep -iq "KVM" 2> /dev/null && vm="KVM"
			printf "${lscpu_data}" | grep -iq "Microsoft" 2> /dev/null && vm="MS Hyper-V"
			[ -n "${vm}" ] && vm_from="lscpu"
		fi
	fi

	#Check vmnet
	if [ -z "${vm_from}" ]; then
		if [ -e /dev/vmnet ]; then
			vm="VMware"
			vm_from="/dev/vmnet"
		fi
	fi

	#Check dmi info
	if [ -z "${vm_from}" ]; then
		if [ -x "$(command -v dmidecode 2>&1)" ]; then
			dmidecode 2>&1 | grep -iq "microsoft corporation" 2> /dev/null && vm="MS Hyper-V"
			dmidecode 2>&1 | grep -iq "vmware" 2> /dev/null && vm="VMware"
			dmidecode 2>&1 | grep -iq "virtualbox" 2> /dev/null && vm="VirtualBox"
			dmidecode 2>&1 | grep -iq "qemu" 2> /dev/null && vm="Qemu/KVM"
			dmidecode 2>&1 | grep -iq "domu" 2> /dev/null && vm="Xen"
			[ -n "${vm}" ] && vm_from="dmi_info"
		fi
	fi

	# Check dmesg Output
	if [ -z "${vm_from}" ]; then
		if [ -x "$(command -v dmesg 2>&1)" ]; then
			dmesg | grep -iqE "vboxbios|vboxcput|vboxfacp|vboxxsdt|(vbox cd-rom)|(vbox harddisk)" && vm="VirtualBox"
			dmesg | grep -iqE "(vmware virtual ide)|(vmware pvscsi)|(vmware virtual platform)" && vm="VMware"
			dmesg | grep -iqE "(xen_mem)|(xen-vbd)" && vm="Xen"
			dmesg | grep -iqE "(qemu virtual cpu version)" && vm="Qemu/KVM"
			[ -n "${vm}" ] && vm_from="dmesg"
		fi
	fi

  export vm
  export vm_from
}

#####################
## begin execution ##

# INSTALLER_HEADLESS: emtpy=false
export INSTALLER_HEADLESS=
export INSTALLER_CONFIGFILE=
export INSTALLER_UNSAFE=

# check passed arguments
while [[ $# -gt 0 ]]; do
  # these options require params
  case "${1}" in
    --config-file)
	  if [ $# -lt 2 ] || [ "${2:0:2}" == '--' ]; then
		  show_dialog --msgbox "ERROR: Option '${1}' requires a parameter. Aborting with error." 0 0
		  exit 1
	  fi
  esac
  # process arguments
  case "${1}" in
    --headless)
      export INSTALLER_HEADLESS=1
      shift ;;
    --unsafe-skip-verify)
      export INSTALLER_UNSAFE=1
      shift ;;
    --config-file)
      export INSTALLER_CONFIGFILE="${2}"
      shift; shift ;;
    *) # unknown option
      show_dialog --msgbox "ERROR: Unknown option '${1}'. Aborting with error." 0 0
      exit 1
      ;;
  esac
done

# display welcome txt depending on used dialog
WHICHDIALOG="$(get_dialog)"

if [ "$(equery --quiet list pentoo/pentoo-installer 2> /dev/null)" = "pentoo/pentoo-installer-99999999" ]; then

	# check if the installer has been updated and warn the user they may wish to do so
	if ! grep -q "completed emerge (.*) pentoo/pentoo-installer-99999999" /var/log/emerge.log; then
		UPDATE_WARNING="true"
	else
		updated_at=$(grep "completed emerge (.*) pentoo/pentoo-installer-99999999" /var/log/emerge.log | tail -n1 | awk -F: '{print $1}')
		current=$(date +%s)
		delta=$((${current} - ${updated_at}))
		if [ ${delta} -ge 86400 ]; then
			UPDATE_WARNING="true"
		else
			UPDATE_WARNING="false"
		fi
	fi

	if [ "${UPDATE_WARNING}" = "true" ]; then
		UPDATE_NOW="$(show_dialog \
			--menu "pentoo-installer gets constant updates to improve experience and fix bugs, would you like to update now?" \
			0 0 0 \
			'Yes' 'I would like to exit and update pentoo-installer to get the latest fixes' \
			'No' 'Why bother to get the latest fixes? I am elite enough to fix it.')"
		if [ "${UPDATE_NOW}" = "Yes" ]; then
			show_dialog --msgbox "Please ensure you have an internet connection then press OK to update pentoo-installer.\nYou will need to rerun pentoo-installer after it is updated." 8 50
      show_dialog --infobox "Updating pentoo-installer..." 3 35
      mkdir -p /etc/portage/profile/package.accept_keywords || exit $?
      echo "pentoo/pentoo-installer **" >> /etc/portage/profile/package.accept_keywords/pentoo-installer || exit $?
			exec /bin/bash -c 'emerge -1 pentoo-installer; rm /etc/portage/profile/package.accept_keywords/pentoo-installer'
			exit 1
		fi
	fi
fi

show_dialog --exit-label " Continue " --textbox "${SHAREDIR}/welcome.${WHICHDIALOG}.txt" 0 0 || exit $?
#try to maximize, this will quietly do nothing in console mode
wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz

RAMSIZE=$(awk '/MemTotal/ {printf( "%.0f\n", int ( $2 / 1024 ) + 1)}' /proc/meminfo)
export RAMSIZE
if [ "${RAMSIZE}" -le "1500" ]; then
  checkvm
  if [ -n "${vm}" ]; then
    show_dialog --msgbox "WARNING: You appear to be running Pentoo in a VM with almost no RAM.  Performance will suffer and so will you. Please give your VM an appropriate amount of RAM for $(date +%Y).  If you continue, the install speed will be greatly reduced due to the low RAM limit." 0 0
  else
    show_dialog --msgbox "WARNING: the install speed will be reduced due to the low system RAM." 0 0
  fi
fi

# check if this boot was verified and warn the user to verify the checksums if not
if [ -z ${INSTALLER_UNSAFE} ] && ! grep -q verify /proc/cmdline; then
  sleep 1
  show_dialog --infobox "Integrity was not verified at boot, verification will happen now" 0 0
  sleep 3
  pushd /mnt/cdrom || exit 1
  if ! b2sum -c isoroot_b2sums; then
    show_dialog --msgbox "Integrity check failed, exiting installer." 0 0
    exit 1
  fi
  popd || exit 1
fi

# 'controller' vars
# CONFIG_LIST: One string with 0 or more items of defined FSspec:
CONFIG_LIST=
MAXSELECTION=0
SELECTION=0

# other vars
NEWSELECTION=
RETSUB=
MENU_ITEMS=

# check for settings from previous installation attempt
if settings_check; then
	# ask if old settings should be loaded
	NEWSELECTION="$(show_dialog \
		--menu "Settings from previously aborted installation detected.\nDo you want to load them?" \
		0 0 0 \
		'No' 'Start from scratch' \
		'Yes' 'Load settings (you might have to enter passwords)')"
	RETSUB=$?
	if [ "${RETSUB}" -eq 0 ] && [ "${NEWSELECTION}" = 'Yes' ]; then
		# extra check, pass menu-index of 'Prepare hard drive'
		if ! settings_checkmount 1; then
			show_dialog --msgbox "ERROR: Unable to load old settings." 0 0
			# settings_shred || exit $?
		# load 'controller' vars'
		else
			SELECTION="$(settings_read 1)" || exit $?
			MAXSELECTION="$(settings_read 2)" || exit $?
			CONFIG_LIST="$(settings_read 3)" || exit $?
		fi
	# else
		# remove old files
		# settings_shred || exit $?
	fi
fi

#set pinentry just in case user wants to encrypt
(eselect pinentry set pinentry-gtk-2 || eselect pinentry set pinentry-curses) || exit $?

while [ true ]; do
	# define menu items
	MENU_ITEMS=()
	# enable only valid menu items
	# 0 - Set Clock
	[ "${MAXSELECTION}" -le 1 ] && MENU_ITEMS+=('0') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Set Clock")
	# 1 - Prepare Hard Drive
	[ "${MAXSELECTION}" -eq 1 ] && MENU_ITEMS+=('1') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Prepare Hard Drive")
	# 2 - Copy the Distribution
	[ "${MAXSELECTION}" -eq 2 ] && MENU_ITEMS+=('2') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Copy the Distribution")
	# 3 - Select Profile
	[ "${MAXSELECTION}" -ge 3 -a "${MAXSELECTION}" -le 5 ] && MENU_ITEMS+=('3') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Select Profile")
	# 4 - Configure System
	[ "${MAXSELECTION}" -ge 4 -a "${MAXSELECTION}" -le 5 ] && MENU_ITEMS+=('4') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Configure System")
	# 5 - Install Bootloader
	[ "${MAXSELECTION}" -eq 5 ] && MENU_ITEMS+=('5') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Install Bootloader")
	# 6 - Exit Install
	[ "${MAXSELECTION}" -eq 6 ] && MENU_ITEMS+=('6') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Exit Install")
	# expand menu items array below
	NEWSELECTION="$(show_dialog --default-item "${SELECTION}" \
		--menu "Use the UP and DOWN arrows to navigate menus. Use TAB to switch between buttons and ENTER to select." \
		0 0 0 "${MENU_ITEMS[@]}")"
	RETSUB=$?
	if [ "${RETSUB}" -ne "0" ]; then
		show_dialog --yesno "Abort installation?" 0 0 && exit "${RETSUB}"
	fi
	# call subscript by selected item
	case "${NEWSELECTION}" in
		"0")
			"${SHAREDIR}"/settzclock
			RETSUB=$?
			;;
		"1")
			# prepares (encrypted) partitions and returns a list of partition configs
			CONFIG_LIST="$("${SHAREDIR}"/partition_mainmenu)"
			RETSUB=$?
			;;
		"2")
			"${SHAREDIR}"/copy_distro "${CONFIG_LIST}"
			RETSUB=$?
			;;
		"3")
			"${SHAREDIR}"/setprofile "${CONFIG_LIST}"
			RETSUB=$?
			;;
		"4")
			"${SHAREDIR}"/configure_system "${CONFIG_LIST}"
			RETSUB=$?
			;;
		"5")
			"${SHAREDIR}"/bootloader_mainmenu "${CONFIG_LIST}"
			RETSUB=$?
			;;
		"6")
			# umount all again and close cryptsetup
			"${SHAREDIR}"/FSspec umountall "${CONFIG_LIST}"
			RETSUB=$?
			# shred temp config file, it might contain encryption keys
			settings_shred
			if [ "${RETSUB}" -eq 0 ]; then
				echo ""
				echo "If the install finished successfully, you can now type 'reboot'"
				echo "to restart the system."
				echo ""
				exit 0
			fi
			;;
		# disabled but displayed options
		'')
			continue
			;;
		*)
			echo "ERROR: Unexpected response '${NEWSELECTION}' in $(basename $0)" 1>&2
			exit 1
			;;
	esac
	# handle errors from sub-script/functions using a common utility function
	if ! catch_menuerror "$(basename $0)" "${NEWSELECTION}" "${RETSUB}"; then
		# everything ok, increase selection for next menu item
		SELECTION="$((NEWSELECTION+1))" || exit $?
		if [ "${MAXSELECTION}" -lt "${SELECTION}" ]; then
			MAXSELECTION="${SELECTION}"
		fi
		# write settings to temp file
		settings_write "${SELECTION}" "${MAXSELECTION}" "${CONFIG_LIST}" || exit $?
	fi
done
