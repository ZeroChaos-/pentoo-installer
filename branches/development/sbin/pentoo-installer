#!/bin/bash
# This script is released under the GNU General Public License 3.0
# Check the COPYING file included with this distribution

# pentoo-installer
# main menu for the installation
# sub scripts should write only results to STDOUT
# menus and noise go to STDERR
# params: none
#
# returns 0 on success
# returns $ERROR_CANCEL=64 on user cancel
# anything else is a real error
# reason: show_dialog() needs a way to exit "Cancel"
#

readonly SHAREDIR="$(dirname ${0})/../share/pentoo-installer"

# source common variables, functions and error handling
source "${SHAREDIR}"/common.sh || exit $?

#####################
## begin execution ##

## start by exiting if the user doesn't have enough RAM for the install to work
RAMSIZE=$(awk '/MemTotal/ {printf( "%.0f\n", int ( $2 / 1024 ) + 1)}' /proc/meminfo)
if [ "${RAMSIZE}" -le "1500" ]; then
	show_dialog --msgbox "The Pentoo Installer requires a minimum of 1.5GB of RAM to run. Failing safe." 0 0
	exit 1
fi

# display welcome txt depending on used dialog
WHICHDIALOG="$(get_dialog)"
show_dialog --textbox "${SHAREDIR}/welcome.${WHICHDIALOG}.txt" 0 0 || exit $?

# 'controller' vars
MAXSELECTION=0
SELECTION=0

# other vars
EDITOR=
NEWSELECTION=
RETSUB=
MENU_ITEMS=

while [ true ]; do
	# define menu items
	MENU_ITEMS=()
	# enable only valid menu items
	# 0 - Set Editor
	[ "${MAXSELECTION}" -eq 0 ] && MENU_ITEMS+=('0') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Set Editor")
	# 1 - Set Clock
	[ "${MAXSELECTION}" -eq 1 ] && MENU_ITEMS+=('1') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Set Clock")
	# 2 - Prepare Hard Drive
	[ "${MAXSELECTION}" -eq 2 ] && MENU_ITEMS+=('2') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Prepare Hard Drive")
	# 3 - Copy the Distribution
	[ "${MAXSELECTION}" -eq 3 ] && MENU_ITEMS+=('3') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Copy the Distribution")
	# 4 - Select Profile
	[ "${MAXSELECTION}" -ge 4 -a "${MAXSELECTION}" -le 6 ] && MENU_ITEMS+=('4') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Select Profile")
	# 5 - Configure System
	[ "${MAXSELECTION}" -ge 5 -a "${MAXSELECTION}" -le 6 ] && MENU_ITEMS+=('5') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Configure System")
	# 6 - Install Bootloader
	[ "${MAXSELECTION}" -eq 6 ] && MENU_ITEMS+=('6') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Install Bootloader")
	# 7 - Exit Install
	[ "${MAXSELECTION}" -eq 7 ] && MENU_ITEMS+=('7') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Exit Install")
	# expand menu items array below
	NEWSELECTION="$(show_dialog --default-item "${SELECTION}" \
		--menu "Use the UP and DOWN arrows to navigate menus. Use TAB to switch between buttons and ENTER to select." \
		0 0 0 "${MENU_ITEMS[@]}")"
	RETSUB=$?
	if [ "${RETSUB}" -ne "0" ]; then
		show_dialog --yesno "Abort installation?" 0 0 && exit "${RETSUB}"
	fi
	# call subscript by selected item
	case "${NEWSELECTION}" in
		"0")
			editor_set
			RETSUB=$?
			;;
		"1")
			"${SHAREDIR}"/time/settzclock
			RETSUB=$?
			;;
		"2")
			# prepares (encrypted) partitions and returns a list of partition configs
			"${SHAREDIR}"/partition_mainmenu
			RETSUB=$?
			;;
		"3")
			"${SHAREDIR}"/copy_distro
			RETSUB=$?
			;;
		"4")
			"${SHAREDIR}"/setprofile
			RETSUB=$?
			;;
		"5")
			"${SHAREDIR}"/configure_system
			RETSUB=$?
			;;
		"6")
			"${SHAREDIR}"/bootloader_mainmenu
			RETSUB=$?
			;;
		"7")
			# umount all again and close cryptsetup
			"${SHAREDIR}"/FSspec umountall
			RETSUB=$?
			if [ "${RETSUB}" -eq 0 ]; then
				echo ""
				echo "If the install finished successfully, you can now type 'reboot'"
				echo "to restart the system."
				echo ""
				exit 0
			fi
			;;
		# disabled but displayed options
		'')
			continue
			;;
		*)
			echo "ERROR: Unexpected response '${NEWSELECTION}' in $(basename $0)" 1>&2
			exit 1
			;;
	esac
	# handle errors from sub-script/functions using a common utility function
	if ! catch_menuerror "$(basename $0)" "${NEWSELECTION}" "${RETSUB}"; then
		# everything ok, increase selection for next menu item
		SELECTION="$((NEWSELECTION+1))" || exit $?
		if [ "${MAXSELECTION}" -lt "${SELECTION}" ]; then
			MAXSELECTION="${SELECTION}"
		fi
	fi
done
